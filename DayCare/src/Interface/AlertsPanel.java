/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Business.Directories.PersonDirectory;
import Business.Entities.Student;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author ketanmalik
 */
public class AlertsPanel extends javax.swing.JPanel {

    /**
     * Creates new form AlertsPanel
     */
    private static PersonDirectory pd;
    DefaultTableModel dtm;

    public AlertsPanel() {
        initComponents();
        pd = PersonDirectory.getObject();
        populateImmunizationTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        immuneAlertsBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        overdueAlertsTable = new javax.swing.JTable();
        adminAlertsBtn1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        upcomingAlertsTable = new javax.swing.JTable();

        setBackground(new java.awt.Color(0, 153, 153));

        immuneAlertsBtn.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        immuneAlertsBtn.setText("View Immunization Alerts");
        immuneAlertsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                immuneAlertsBtnActionPerformed(evt);
            }
        });

        overdueAlertsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Student Name", "Age (months)", "Vaccine Name", "Past Due (months)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(overdueAlertsTable);
        if (overdueAlertsTable.getColumnModel().getColumnCount() > 0) {
            overdueAlertsTable.getColumnModel().getColumn(0).setResizable(false);
            overdueAlertsTable.getColumnModel().getColumn(1).setResizable(false);
            overdueAlertsTable.getColumnModel().getColumn(2).setResizable(false);
            overdueAlertsTable.getColumnModel().getColumn(3).setResizable(false);
        }

        adminAlertsBtn1.setFont(new java.awt.Font("Arial", 0, 15)); // NOI18N
        adminAlertsBtn1.setText("View Administrative Alerts");
        adminAlertsBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adminAlertsBtn1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Overdue:");

        jLabel2.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Upcoming:");

        upcomingAlertsTable.setAutoCreateRowSorter(true);
        upcomingAlertsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Student Name", "Age (months)", "Vaccine Name", "Due In (months)"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(upcomingAlertsTable);
        if (upcomingAlertsTable.getColumnModel().getColumnCount() > 0) {
            upcomingAlertsTable.getColumnModel().getColumn(0).setResizable(false);
            upcomingAlertsTable.getColumnModel().getColumn(1).setResizable(false);
            upcomingAlertsTable.getColumnModel().getColumn(2).setResizable(false);
            upcomingAlertsTable.getColumnModel().getColumn(3).setResizable(false);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(110, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(immuneAlertsBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(adminAlertsBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(121, 121, 121)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(95, 95, 95))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(177, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(132, 132, 132)
                        .addComponent(immuneAlertsBtn))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(adminAlertsBtn1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jLabel2)
                        .addGap(6, 6, 6)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(211, 211, 211))
        );
    }// </editor-fold>//GEN-END:initComponents

    public void populateImmunizationTable() {
        getImmunizationAlerts();

    }

    private void sort() {
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(dtm);
        upcomingAlertsTable.setRowSorter(sorter);
    }

    private void getImmunizationAlerts() {
        dtm = (DefaultTableModel) upcomingAlertsTable.getModel();

        dtm.setRowCount(0);
        for (Student s : pd.getStudentDirectory()) {
            String[] dates = s.getVaccinationRecord().get("Hib").split(",");
            for (String date : dates) {
                if (date.equals("delay")) {

                } else if (date.equals("na")) {

                } else {
                    if (Integer.parseInt(date) > s.getAge()) {
                        Object[] row = new Object[4];
                        row[0] = s;
                        row[1] = s.getAge();
                        row[2] = "Hib";
                        row[3] = Integer.parseInt(date) - s.getAge();
                        dtm.addRow(row);
                    }
                }
            }

            dates = s.getVaccinationRecord().get("DTaP").split(",");
            for (String date : dates) {
                if (date.equals("delay")) {

                } else if (date.equals("na")) {

                } else {
                    if (Integer.parseInt(date) > s.getAge()) {
                        Object[] row = new Object[4];
                        row[0] = s;
                        row[1] = s.getAge();
                        row[2] = "DTaP";
                        row[3] = Integer.parseInt(date) - s.getAge();
                        dtm.addRow(row);
                    }
                }
            }
            dates = s.getVaccinationRecord().get("Polio").split(",");
            for (String date : dates) {
                if (date.equals("delay")) {

                } else if (date.equals("na")) {

                } else {
                    if (Integer.parseInt(date) > s.getAge()) {
                        Object[] row = new Object[4];
                        row[0] = s;
                        row[1] = s.getAge();
                        row[2] = "Polio";
                        row[3] = Integer.parseInt(date) - s.getAge();
                        dtm.addRow(row);
                    }
                }
            }
            dates = s.getVaccinationRecord().get("HepatitisB").split(",");
            for (String date : dates) {
                if (date.equals("delay")) {

                } else if (date.equals("na")) {

                } else {
                    if (Integer.parseInt(date) > s.getAge()) {
                        Object[] row = new Object[4];
                        row[0] = s;
                        row[1] = s.getAge();
                        row[2] = "Hepatitis B";
                        row[3] = Integer.parseInt(date) - s.getAge();
                        dtm.addRow(row);
                    }
                }
            }
            dates = s.getVaccinationRecord().get("MMR").split(",");
            for (String date : dates) {
                if (date.equals("delay")) {

                } else if (date.equals("na")) {

                } else {
                    if (Integer.parseInt(date) > s.getAge()) {
                        Object[] row = new Object[4];
                        row[0] = s;
                        row[1] = s.getAge();
                        row[2] = "MMR";
                        row[3] = Integer.parseInt(date) - s.getAge();
                        dtm.addRow(row);
                    }
                }
            }
            dates = s.getVaccinationRecord().get("Varicella").split(",");
            for (String date : dates) {
                if (date.equals("delay")) {

                } else if (date.equals("na")) {

                } else {
                    if (Integer.parseInt(date) > s.getAge()) {
                        Object[] row = new Object[4];
                        row[0] = s;
                        row[1] = s.getAge();
                        row[2] = "Varicella";
                        row[3] = Integer.parseInt(date) - s.getAge();
                        dtm.addRow(row);
                    }
                }
            }
        }
    }
    private void immuneAlertsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_immuneAlertsBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_immuneAlertsBtnActionPerformed

    private void adminAlertsBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adminAlertsBtn1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_adminAlertsBtn1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton adminAlertsBtn1;
    private javax.swing.JButton immuneAlertsBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable overdueAlertsTable;
    private javax.swing.JTable upcomingAlertsTable;
    // End of variables declaration//GEN-END:variables
}
