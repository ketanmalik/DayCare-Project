/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI.Alerts;

import Business.Directories.PersonDirectory;
import Business.Entities.Student;
import Business.Util.DateUtil;
import Business.Util.SMS;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ketanmalik
 */
public class ManageImmunizationPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageImmunizationPanel
     */
    private JPanel displayPanel;
    private PersonDirectory personDirectory;

    public ManageImmunizationPanel(JPanel displayPanel) {
        this.displayPanel = displayPanel;
        personDirectory = PersonDirectory.getObject();
        initComponents();
        populateStudentDropdown();
        populateFields(personDirectory.getStudentDirectory().get(0));
        populateTable(personDirectory.getStudentDirectory().get(0), 7);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backBtn2 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        studentDropdown = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        filterDropdown = new javax.swing.JComboBox<>();
        idTxtField = new javax.swing.JTextField();
        nameTxtField = new javax.swing.JTextField();
        bdayTxtField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        filterTbl = new javax.swing.JTable();
        reminderBtn = new javax.swing.JButton();
        tableLabel = new javax.swing.JLabel();
        pastDueCheckBox = new javax.swing.JCheckBox();

        setBackground(new java.awt.Color(0, 153, 153));

        backBtn2.setText("Back");
        backBtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtn2ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Lucida Grande", 0, 20)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Manage Immunization Alerts");

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("ID:");

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Name:");

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Birthday:");

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Student:");

        studentDropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        studentDropdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentDropdownActionPerformed(evt);
            }
        });

        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Due In:");

        filterDropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Next 7 Days", "Next 15 Days", "Next 30 Days" }));
        filterDropdown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterDropdownActionPerformed(evt);
            }
        });

        idTxtField.setEnabled(false);

        nameTxtField.setEnabled(false);

        bdayTxtField.setEnabled(false);

        filterTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Vaccination", "Dose", "Due Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(filterTbl);
        if (filterTbl.getColumnModel().getColumnCount() > 0) {
            filterTbl.getColumnModel().getColumn(0).setResizable(false);
            filterTbl.getColumnModel().getColumn(1).setResizable(false);
            filterTbl.getColumnModel().getColumn(2).setResizable(false);
        }

        reminderBtn.setText("Send Reminder");
        reminderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reminderBtnActionPerformed(evt);
            }
        });

        tableLabel.setText("jLabel1");

        pastDueCheckBox.setForeground(new java.awt.Color(255, 255, 255));
        pastDueCheckBox.setText("Past Due");
        pastDueCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pastDueCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backBtn2)
                        .addGap(190, 190, 190)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(studentDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(filterDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(pastDueCheckBox))
                            .addComponent(tableLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel2))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(idTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jLabel5)
                                                .addGap(18, 18, 18)
                                                .addComponent(bdayTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(nameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(50, 50, 50)
                                .addComponent(reminderBtn)))))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(backBtn2))
                .addGap(55, 55, 55)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(studentDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(filterDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pastDueCheckBox))
                .addGap(18, 18, 18)
                .addComponent(tableLabel)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(127, 127, 127)
                        .addComponent(reminderBtn)))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(idTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(bdayTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(nameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(130, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    public void populateStudentDropdown() {
        studentDropdown.removeAllItems();
        for (Student s : personDirectory.getStudentDirectory()) {
            studentDropdown.addItem(s.getName());
        }
    }

    public void populateFields(Student s) {
        idTxtField.setText(String.valueOf(s.getId()));
        nameTxtField.setText(s.getName());
        bdayTxtField.setText(DateUtil.getDateToString(s.getBirthDate()));
    }

    public void populateTable(Student s, int filter) {
        DefaultTableModel dtm = (DefaultTableModel) filterTbl.getModel();
        dtm.setRowCount(0);

        Map<String, List<Integer>> vaccinationHistory = new HashMap<>();
        vaccinationHistory = s.getVaccinationHistory();
        Set<Map.Entry<String, List<Integer>>> entrySet = vaccinationHistory.entrySet();
        Iterator<Map.Entry<String, List<Integer>>> itr = entrySet.iterator();
        while (itr.hasNext()) {
            Map.Entry<String, List<Integer>> e = (Map.Entry<String, List<Integer>>) itr.next();
            for (Integer i : e.getValue()) {
                if (i >= s.getAge()) {
                    if ((i - s.getAge() == 1)) {
                        int dueIn = DateUtil.getStuDueDate(s.getBirthDate(), i);
                        if (pastDueCheckBox.isSelected()) {
                            filterDropdown.setEnabled(false);
                            tableLabel.setText("Past Due Alerts:");
                            tableLabel.setForeground(Color.red);
                            if (dueIn < 0) {
                                Object row[] = new Object[3];
                                row[0] = e.getKey();
                                row[1] = e.getValue().indexOf(i) + 1;
                                row[2] = DateUtil.getDateToString(DateUtil.plusStuDays(s.getBirthDate(), (i - s.getAge()), "addYear"));

                                dtm.addRow(row);
                            }
                        } else {
                            filterDropdown.setEnabled(true);
                            tableLabel.setText("Upcoming/Due Today Alerts:");
                            tableLabel.setForeground(Color.white);
                            if (dueIn >= 0) {
                                if (dueIn <= filter) {
                                    Object[] row = new Object[3];
                                    row[0] = e.getKey();
                                    row[1] = e.getValue().indexOf(i) + 1;
                                    row[2] = DateUtil.getDateToString(DateUtil.plusStuDays(s.getBirthDate(), (i - s.getAge()), "addYear"));

                                    dtm.addRow(row);
                                }
                            }
                        }
                    } else {
                        if (pastDueCheckBox.isSelected()) {
                            filterDropdown.setEnabled(false);
                            tableLabel.setText("Past Due Alerts:");
                            tableLabel.setForeground(Color.red);
                            int dueIn = DateUtil.getStuDueDate(s.getBirthDate(), i);
                            if (dueIn < 0) {
                                Object row[] = new Object[3];
                                row[0] = e.getKey();
                                row[1] = e.getValue().indexOf(i) + 1;
                                row[2] = DateUtil.getDateToString(DateUtil.futureStuDueDates(s.getBirthDate(), i));

                                dtm.addRow(row);
                            }
                        }
                    }
                }
            }
        }
    }

    private void backBtn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtn2ActionPerformed
        displayPanel.remove(this);
        Component[] componentArray = displayPanel.getComponents();
        Component component = componentArray[componentArray.length - 1];
        AlertsJPanel ap = (AlertsJPanel) component;
        ap.populateAdministrativeTable();
        ap.populateImmunizationTable();
        CardLayout layout = (CardLayout) displayPanel.getLayout();
        layout.previous(displayPanel);
    }//GEN-LAST:event_backBtn2ActionPerformed

    private void filterDropdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterDropdownActionPerformed
        applyFilter();
    }//GEN-LAST:event_filterDropdownActionPerformed

    private void studentDropdownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentDropdownActionPerformed
        applyFilter();
    }//GEN-LAST:event_studentDropdownActionPerformed

    private void pastDueCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pastDueCheckBoxActionPerformed
        applyFilter();
        if (pastDueCheckBox.isSelected()) {
            tableLabel.setText("Past Due Alerts:");
            tableLabel.setForeground(Color.red);
            filterDropdown.setEnabled(false);
        } else {
            tableLabel.setForeground(Color.white);
            tableLabel.setText("Upcoming/Due Today Alerts:");
            filterDropdown.setEnabled(true);
        }
    }//GEN-LAST:event_pastDueCheckBoxActionPerformed

    private void reminderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reminderBtnActionPerformed
        int selectedRow = filterTbl.getSelectedRow();
        if (selectedRow >= 0) {
            String name = (String) studentDropdown.getSelectedItem();
            String vaccineName = (String) filterTbl.getValueAt(selectedRow, 0);
            int dose = (Integer) filterTbl.getValueAt(selectedRow, 1);
            String date = (String) filterTbl.getValueAt(selectedRow, 2);
            String msg = "";
            if (pastDueCheckBox.isSelected()) {
                msg = "Dose - " + dose + " of vaccine " + vaccineName + " for " + name + " was due on " + date;
            } else {
                msg = "Dose - " + dose + " of vaccine " + vaccineName + " for " + name + " is due on " + date;
            }
            SMS.sendSMS(msg);
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row to send reminder", "No Selection Found", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_reminderBtnActionPerformed

    private void applyFilter() {
        String name = (String) studentDropdown.getSelectedItem();
        if (name != null) {
            int filter = 0;
            Student s = null;
            for (Student stu : personDirectory.getStudentDirectory()) {
                if (stu.getName().equals(name)) {
                    s = stu;
                    break;
                }
            }
            String f = (String) filterDropdown.getSelectedItem();
            if (f.equalsIgnoreCase("next 7 days")) {
                filter = 7;
            } else if (f.equalsIgnoreCase("next 15 days")) {
                filter = 15;
            } else if (f.equalsIgnoreCase("next 30 days")) {
                filter = 30;
            }
            populateTable(s, filter);
            populateFields(s);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn2;
    private javax.swing.JTextField bdayTxtField;
    private javax.swing.JComboBox<String> filterDropdown;
    private javax.swing.JTable filterTbl;
    private javax.swing.JTextField idTxtField;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nameTxtField;
    private javax.swing.JCheckBox pastDueCheckBox;
    private javax.swing.JButton reminderBtn;
    private javax.swing.JComboBox<String> studentDropdown;
    private javax.swing.JLabel tableLabel;
    // End of variables declaration//GEN-END:variables
}
